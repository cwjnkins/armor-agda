{-# OPTIONS --subtyping #-}

open import Aeres.Prelude

open import Aeres.Binary
open import Aeres.Data.X509
open import Aeres.Data.X509.Decidable.AIAFields
open import Aeres.Data.X509.Decidable.AKIFields
open import Aeres.Data.X509.Decidable.BCFields
open import Aeres.Data.X509.Decidable.Boool
open import Aeres.Data.X509.Decidable.CRLDistFields
open import Aeres.Data.X509.Decidable.CertPolFields
open import Aeres.Data.X509.Decidable.EKUFields
open import Aeres.Data.X509.Decidable.IANFields
open import Aeres.Data.X509.Decidable.KUFields
open import Aeres.Data.X509.Decidable.OID
open import Aeres.Data.X509.Decidable.SANFields
open import Aeres.Data.X509.Decidable.SKIFields
open import Aeres.Data.X509.Decidable.Seq
open import Aeres.Data.X509.Decidable.TLV
open import Aeres.Data.X509.Properties as Props
open import Aeres.Grammar.Definitions
open import Aeres.Grammar.Parser
open import Aeres.Grammar.Properties
open import Data.List.Properties
open import Data.Nat.Properties
  hiding (_≟_)

module Aeres.Data.X509.Decidable.Extension where

open Base256

module parseExtension where
  here' = "parseExtension"

  parseExtensionFields
    : ∀ {t} {@0 A : @0 List Dig → Set}
      → @0  NonNesting _ A → @0 NoConfusion _ Generic.Boool A
      → Parser _ (Logging ∘ Dec) A
      → ExactLengthParser _ (Logging ∘ Dec) (X509.ExtensionFields t A)
  parseExtensionFields{t}{A} nn nc p₁ n =
    parseEquivalent _
      (transEquivalent _
        (symEquivalent _ (Distribute.exactLength-& _))
        (equivalent×ₚ _ Props.Extension.equivalent))
      (parse&ᵈ _
        (withinLength-nonnesting _ (nonnesting×ₚ₁ _ Props.TLV.nonnesting))
        (λ where
          (mk×ₚ fstₚ₁ (─ sndₚ₁) refl) (mk×ₚ fstₚ₂ (─ sndₚ₂) refl) → ‼
            subst₀ (λ x → mk×ₚ fstₚ₁ (─ sndₚ₁) refl ≡ mk×ₚ x (─ sndₚ₂) refl)
              (unambiguous×ₚ _ (TLV.unambiguous (Seq.unambiguous Props.OIDSub.unambiguous)) (λ where refl refl → refl) fstₚ₁ fstₚ₂)
                (subst₀ (λ x → mk×ₚ fstₚ₁ (─ sndₚ₁) refl ≡ mk×ₚ fstₚ₁ (─ x) refl) (≤-irrelevant sndₚ₁ sndₚ₂)
                  refl))
        (parse≤ _ n
          (parse× _ Props.TLV.nonnesting (λ where _ refl refl → refl) (tell $ here' String.++ ": fields: impossible")
            parseOID (parseLit _ (tell $ here' String.++ ": fields: underflow") (tell $ here' String.++ ": fields: literal mismatch" ) _))
          (nonnesting×ₚ₁ _ Props.TLV.nonnesting) (tell $ here' String.++ ": fields: overflow"))
        λ where
          {._} _ (mk×ₚ (mk×ₚ fstₚ₁ refl refl) (─ bsLen) refl) →
            parseOption₁&₁ _ parseBool p₁ Props.TLV.nonnesting nn nc (tell $ here' String.++ ": length mismatch (bool)") (n - length t))


  parseSelectExtn : ExactLengthParser _ (Logging ∘ Dec) X509.SelectExtn
  parseSelectExtn n =
    parseEquivalent _
      (transEquivalent _ (symEquivalent _ (Distribute.exactLength-Sum _)) (equivalent×ₚ _ Props.Extension.SelectExtn.equivalent))
      (parseSum _
        (parseExtensionFields Props.TLV.nonnesting (TLV.noconfusion (λ ())) parseAKIFields n)
        (parseEquivalent _ (symEquivalent _ (Distribute.exactLength-Sum _))
          (parseSum _
            (parseExtensionFields Props.TLV.nonnesting (Props.TLV.noconfusion (λ ())) parseSKIFields n)
            (parseEquivalent _ (symEquivalent _ (Distribute.exactLength-Sum _))
               (parseSum _
                 (parseExtensionFields Props.TLV.nonnesting (Props.TLV.noconfusion λ ()) parseKUFields n)
                 (parseEquivalent _ (symEquivalent _ (Distribute.exactLength-Sum _))
                    (parseSum _
                      (parseExtensionFields Props.TLV.nonnesting (Props.TLV.noconfusion λ ()) parseEKUFields n)
                      (parseEquivalent _ (symEquivalent _ (Distribute.exactLength-Sum _))
                         (parseSum _
                           (parseExtensionFields Props.TLV.nonnesting (Props.TLV.noconfusion λ ()) parseBCFields n)
                           (parseEquivalent _ (symEquivalent _ (Distribute.exactLength-Sum _))
                              (parseSum _
                                (parseExtensionFields Props.TLV.nonnesting (Props.TLV.noconfusion λ ()) parseIANFields n)
                                (parseEquivalent _ (symEquivalent _ (Distribute.exactLength-Sum _))
                                   (parseSum _
                                     (parseExtensionFields Props.TLV.nonnesting (Props.TLV.noconfusion λ ()) parseSANFields n)
                                     (parseEquivalent _ (symEquivalent _ (Distribute.exactLength-Sum _))
                                        (parseSum _
                                          (parseExtensionFields Props.TLV.nonnesting (Props.TLV.noconfusion λ ()) parseCertPolFields n)
                                          (parseEquivalent _ (symEquivalent _ (Distribute.exactLength-Sum _))
                                             (parseSum _
                                               (parseExtensionFields Props.TLV.nonnesting (Props.TLV.noconfusion λ ()) parseCRLDistFields n)
                                               (parseExtensionFields Props.TLV.nonnesting (Props.TLV.noconfusion λ ()) parseAIAFields n))))))))))))))))))

  parseExtension : Parser _ (Logging ∘ Dec) X509.Extension
  parseExtension = parseTLV _ "extension" _ parseSelectExtn

  parseExtensionsSeq : Parser _ (Logging ∘ Dec) X509.ExtensionsSeq
  parseExtensionsSeq = parseSeq "extension" _ Props.TLV.nonempty Props.TLV.nonnesting parseExtension

  parseExtensions : Parser _ (Logging ∘ Dec) X509.Extensions
  parseExtensions =
    parseTLV _ "extensions" _
      (parseExactLength _ Props.TLV.nonnesting (tell "parseExtensions: length mismatch") parseExtensionsSeq)

open parseExtension public using (parseExtensions)

private
  module Test where

    val₁ : List Dig
    val₁ = # 163 ∷ # 130 ∷ # 4 ∷ # 184 ∷ # 48 ∷ # 130 ∷ # 4 ∷ # 180 ∷ # 48 ∷ # 31 ∷ # 6 ∷ # 3 ∷ # 85 ∷ # 29 ∷ # 35 ∷ # 4 ∷ # 24 ∷ # 48 ∷ # 22 ∷ # 128 ∷ # 20 ∷ # 36 ∷ # 110 ∷ # 43 ∷ # 45 ∷ # 208 ∷ # 106 ∷ # 146 ∷ # 81 ∷ # 81 ∷ # 37 ∷ # 105 ∷ # 1 ∷ # 170 ∷ # 154 ∷ # 71 ∷ # 166 ∷ # 137 ∷ # 231 ∷ # 64 ∷ # 32 ∷ # 48 ∷ # 29 ∷ # 6 ∷ # 3 ∷ # 85 ∷ # 29 ∷ # 14 ∷ # 4 ∷ # 22 ∷ # 4 ∷ # 20 ∷ # 147 ∷ # 61 ∷ # 128 ∷ # 160 ∷ # 120 ∷ # 95 ∷ # 164 ∷ # 18 ∷ # 101 ∷ # 194 ∷ # 57 ∷ # 173 ∷ # 54 ∷ # 77 ∷ # 116 ∷ # 177 ∷ # 171 ∷ # 84 ∷ # 108 ∷ # 167 ∷ # 48 ∷ # 130 ∷ # 1 ∷ # 130 ∷ # 6 ∷ # 3 ∷ # 85 ∷ # 29 ∷ # 17 ∷ # 4 ∷ # 130 ∷ # 1 ∷ # 121 ∷ # 48 ∷ # 130 ∷ # 1 ∷ # 117 ∷ # 130 ∷ # 10 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 8 ∷ # 97 ∷ # 109 ∷ # 122 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 17 ∷ # 117 ∷ # 101 ∷ # 100 ∷ # 97 ∷ # 116 ∷ # 97 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 13 ∷ # 117 ∷ # 115 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 14 ∷ # 119 ∷ # 119 ∷ # 119 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 12 ∷ # 119 ∷ # 119 ∷ # 119 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 122 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 20 ∷ # 99 ∷ # 111 ∷ # 114 ∷ # 112 ∷ # 111 ∷ # 114 ∷ # 97 ∷ # 116 ∷ # 101 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 17 ∷ # 98 ∷ # 117 ∷ # 121 ∷ # 98 ∷ # 111 ∷ # 120 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 17 ∷ # 105 ∷ # 112 ∷ # 104 ∷ # 111 ∷ # 110 ∷ # 101 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 13 ∷ # 121 ∷ # 112 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 15 ∷ # 104 ∷ # 111 ∷ # 109 ∷ # 101 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 21 ∷ # 111 ∷ # 114 ∷ # 105 ∷ # 103 ∷ # 105 ∷ # 110 ∷ # 45 ∷ # 119 ∷ # 119 ∷ # 119 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 33 ∷ # 98 ∷ # 117 ∷ # 99 ∷ # 107 ∷ # 101 ∷ # 121 ∷ # 101 ∷ # 45 ∷ # 114 ∷ # 101 ∷ # 116 ∷ # 97 ∷ # 105 ∷ # 108 ∷ # 45 ∷ # 119 ∷ # 101 ∷ # 98 ∷ # 115 ∷ # 105 ∷ # 116 ∷ # 101 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 18 ∷ # 104 ∷ # 117 ∷ # 100 ∷ # 100 ∷ # 108 ∷ # 101 ∷ # 115 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 37 ∷ # 112 ∷ # 45 ∷ # 110 ∷ # 116 ∷ # 45 ∷ # 119 ∷ # 119 ∷ # 119 ∷ # 45 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 45 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 45 ∷ # 107 ∷ # 97 ∷ # 108 ∷ # 105 ∷ # 97 ∷ # 115 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 37 ∷ # 112 ∷ # 45 ∷ # 121 ∷ # 111 ∷ # 45 ∷ # 119 ∷ # 119 ∷ # 119 ∷ # 45 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 45 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 45 ∷ # 107 ∷ # 97 ∷ # 108 ∷ # 105 ∷ # 97 ∷ # 115 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 37 ∷ # 112 ∷ # 45 ∷ # 121 ∷ # 51 ∷ # 45 ∷ # 119 ∷ # 119 ∷ # 119 ∷ # 45 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 45 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 45 ∷ # 107 ∷ # 97 ∷ # 108 ∷ # 105 ∷ # 97 ∷ # 115 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 48 ∷ # 14 ∷ # 6 ∷ # 3 ∷ # 85 ∷ # 29 ∷ # 15 ∷ # 1 ∷ # 1 ∷ # 255 ∷ # 4 ∷ # 4 ∷ # 3 ∷ # 2 ∷ # 5 ∷ # 160 ∷ # 48 ∷ # 29 ∷ # 6 ∷ # 3 ∷ # 85 ∷ # 29 ∷ # 37 ∷ # 4 ∷ # 22 ∷ # 48 ∷ # 20 ∷ # 6 ∷ # 8 ∷ # 43 ∷ # 6 ∷ # 1 ∷ # 5 ∷ # 5 ∷ # 7 ∷ # 3 ∷ # 1 ∷ # 6 ∷ # 8 ∷ # 43 ∷ # 6 ∷ # 1 ∷ # 5 ∷ # 5 ∷ # 7 ∷ # 3 ∷ # 2 ∷ # 48 ∷ # 119 ∷ # 6 ∷ # 3 ∷ # 85 ∷ # 29 ∷ # 31 ∷ # 4 ∷ # 112 ∷ # 48 ∷ # 110 ∷ # 48 ∷ # 53 ∷ # 160 ∷ # 51 ∷ # 160 ∷ # 49 ∷ # 134 ∷ # 47 ∷ # 104 ∷ # 116 ∷ # 116 ∷ # 112 ∷ # 58 ∷ # 47 ∷ # 47 ∷ # 99 ∷ # 114 ∷ # 108 ∷ # 51 ∷ # 46 ∷ # 100 ∷ # 105 ∷ # 103 ∷ # 105 ∷ # 99 ∷ # 101 ∷ # 114 ∷ # 116 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 47 ∷ # 68 ∷ # 105 ∷ # 103 ∷ # 105 ∷ # 67 ∷ # 101 ∷ # 114 ∷ # 116 ∷ # 71 ∷ # 108 ∷ # 111 ∷ # 98 ∷ # 97 ∷ # 108 ∷ # 67 ∷ # 65 ∷ # 71 ∷ # 50 ∷ # 46 ∷ # 99 ∷ # 114 ∷ # 108 ∷ # 48 ∷ # 53 ∷ # 160 ∷ # 51 ∷ # 160 ∷ # 49 ∷ # 134 ∷ # 47 ∷ # 104 ∷ # 116 ∷ # 116 ∷ # 112 ∷ # 58 ∷ # 47 ∷ # 47 ∷ # 99 ∷ # 114 ∷ # 108 ∷ # 52 ∷ # 46 ∷ # 100 ∷ # 105 ∷ # 103 ∷ # 105 ∷ # 99 ∷ # 101 ∷ # 114 ∷ # 116 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 47 ∷ # 68 ∷ # 105 ∷ # 103 ∷ # 105 ∷ # 67 ∷ # 101 ∷ # 114 ∷ # 116 ∷ # 71 ∷ # 108 ∷ # 111 ∷ # 98 ∷ # 97 ∷ # 108 ∷ # 67 ∷ # 65 ∷ # 71 ∷ # 50 ∷ # 46 ∷ # 99 ∷ # 114 ∷ # 108 ∷ # 48 ∷ # 62 ∷ # 6 ∷ # 3 ∷ # 85 ∷ # 29 ∷ # 32 ∷ # 4 ∷ # 55 ∷ # 48 ∷ # 53 ∷ # 48 ∷ # 51 ∷ # 6 ∷ # 6 ∷ # 103 ∷ # 129 ∷ # 12 ∷ # 1 ∷ # 2 ∷ # 1 ∷ # 48 ∷ # 41 ∷ # 48 ∷ # 39 ∷ # 6 ∷ # 8 ∷ # 43 ∷ # 6 ∷ # 1 ∷ # 5 ∷ # 5 ∷ # 7 ∷ # 2 ∷ # 1 ∷ # 22 ∷ # 27 ∷ # 104 ∷ # 116 ∷ # 116 ∷ # 112 ∷ # 58 ∷ # 47 ∷ # 47 ∷ # 119 ∷ # 119 ∷ # 119 ∷ # 46 ∷ # 100 ∷ # 105 ∷ # 103 ∷ # 105 ∷ # 99 ∷ # 101 ∷ # 114 ∷ # 116 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 47 ∷ # 67 ∷ # 80 ∷ # 83 ∷ # 48 ∷ # 116 ∷ # 6 ∷ # 8 ∷ # 43 ∷ # 6 ∷ # 1 ∷ # 5 ∷ # 5 ∷ # 7 ∷ # 1 ∷ # 1 ∷ # 4 ∷ # 104 ∷ # 48 ∷ # 102 ∷ # 48 ∷ # 36 ∷ # 6 ∷ # 8 ∷ # 43 ∷ # 6 ∷ # 1 ∷ # 5 ∷ # 5 ∷ # 7 ∷ # 48 ∷ # 1 ∷ # 134 ∷ # 24 ∷ # 104 ∷ # 116 ∷ # 116 ∷ # 112 ∷ # 58 ∷ # 47 ∷ # 47 ∷ # 111 ∷ # 99 ∷ # 115 ∷ # 112 ∷ # 46 ∷ # 100 ∷ # 105 ∷ # 103 ∷ # 105 ∷ # 99 ∷ # 101 ∷ # 114 ∷ # 116 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 48 ∷ # 62 ∷ # 6 ∷ # 8 ∷ # 43 ∷ # 6 ∷ # 1 ∷ # 5 ∷ # 5 ∷ # 7 ∷ # 48 ∷ # 2 ∷ # 134 ∷ # 50 ∷ # 104 ∷ # 116 ∷ # 116 ∷ # 112 ∷ # 58 ∷ # 47 ∷ # 47 ∷ # 99 ∷ # 97 ∷ # 99 ∷ # 101 ∷ # 114 ∷ # 116 ∷ # 115 ∷ # 46 ∷ # 100 ∷ # 105 ∷ # 103 ∷ # 105 ∷ # 99 ∷ # 101 ∷ # 114 ∷ # 116 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 47 ∷ # 68 ∷ # 105 ∷ # 103 ∷ # 105 ∷ # 67 ∷ # 101 ∷ # 114 ∷ # 116 ∷ # 71 ∷ # 108 ∷ # 111 ∷ # 98 ∷ # 97 ∷ # 108 ∷ # 67 ∷ # 65 ∷ # 71 ∷ # 50 ∷ # 46 ∷ # 99 ∷ # 114 ∷ # 116 ∷ # 48 ∷ # 12 ∷ # 6 ∷ # 3 ∷ # 85 ∷ # 29 ∷ # 19 ∷ # 1 ∷ # 1 ∷ # 255 ∷ # 4 ∷ # 2 ∷ # 48 ∷ # 0 ∷ # 48 ∷ # 130 ∷ # 1 ∷ # 126 ∷ # 6 ∷ # 10 ∷ # 43 ∷ # 6 ∷ # 1 ∷ # 4 ∷ # 1 ∷ # 214 ∷ # 121 ∷ # 2 ∷ # 4 ∷ # 2 ∷ # 4 ∷ # 130 ∷ # 1 ∷ # 110 ∷ # 4 ∷ # 130 ∷ # 1 ∷ # 106 ∷ # 1 ∷ # 104 ∷ # 0 ∷ # 118 ∷ # 0 ∷ # 70 ∷ # 165 ∷ # 85 ∷ # 235 ∷ # 117 ∷ # 250 ∷ # 145 ∷ # 32 ∷ # 48 ∷ # 181 ∷ # 162 ∷ # 137 ∷ # 105 ∷ # 244 ∷ # 243 ∷ # 125 ∷ # 17 ∷ # 44 ∷ # 65 ∷ # 116 ∷ # 190 ∷ # 253 ∷ # 73 ∷ # 184 ∷ # 133 ∷ # 171 ∷ # 242 ∷ # 252 ∷ # 112 ∷ # 254 ∷ # 109 ∷ # 71 ∷ # 0 ∷ # 0 ∷ # 1 ∷ # 120 ∷ # 235 ∷ # 135 ∷ # 157 ∷ # 144 ∷ # 0 ∷ # 0 ∷ # 4 ∷ # 3 ∷ # 0 ∷ # 71 ∷ # 48 ∷ # 69 ∷ # 2 ∷ # 33 ∷ # 0 ∷ # 196 ∷ # 254 ∷ # 107 ∷ # 59 ∷ # 208 ∷ # 56 ∷ # 192 ∷ # 99 ∷ # 113 ∷ # 49 ∷ # 48 ∷ # 242 ∷ # 239 ∷ # 116 ∷ # 222 ∷ # 166 ∷ # 90 ∷ # 243 ∷ # 226 ∷ # 171 ∷ # 138 ∷ # 65 ∷ # 117 ∷ # 71 ∷ # 81 ∷ # 253 ∷ # 71 ∷ # 72 ∷ # 155 ∷ # 206 ∷ # 204 ∷ # 126 ∷ # 2 ∷ # 32 ∷ # 2 ∷ # 188 ∷ # 10 ∷ # 48 ∷ # 219 ∷ # 13 ∷ # 101 ∷ # 2 ∷ # 238 ∷ # 88 ∷ # 75 ∷ # 238 ∷ # 12 ∷ # 80 ∷ # 101 ∷ # 61 ∷ # 181 ∷ # 82 ∷ # 188 ∷ # 124 ∷ # 151 ∷ # 171 ∷ # 119 ∷ # 44 ∷ # 60 ∷ # 186 ∷ # 144 ∷ # 206 ∷ # 45 ∷ # 246 ∷ # 142 ∷ # 203 ∷ # 0 ∷ # 118 ∷ # 0 ∷ # 34 ∷ # 69 ∷ # 69 ∷ # 7 ∷ # 89 ∷ # 85 ∷ # 36 ∷ # 86 ∷ # 150 ∷ # 63 ∷ # 161 ∷ # 47 ∷ # 241 ∷ # 247 ∷ # 109 ∷ # 134 ∷ # 224 ∷ # 35 ∷ # 38 ∷ # 99 ∷ # 173 ∷ # 192 ∷ # 75 ∷ # 127 ∷ # 93 ∷ # 198 ∷ # 131 ∷ # 92 ∷ # 110 ∷ # 226 ∷ # 15 ∷ # 2 ∷ # 0 ∷ # 0 ∷ # 1 ∷ # 120 ∷ # 235 ∷ # 135 ∷ # 157 ∷ # 172 ∷ # 0 ∷ # 0 ∷ # 4 ∷ # 3 ∷ # 0 ∷ # 71 ∷ # 48 ∷ # 69 ∷ # 2 ∷ # 33 ∷ # 0 ∷ # 199 ∷ # 18 ∷ # 4 ∷ # 33 ∷ # 255 ∷ # 211 ∷ # 186 ∷ # 79 ∷ # 238 ∷ # 49 ∷ # 188 ∷ # 218 ∷ # 98 ∷ # 111 ∷ # 120 ∷ # 221 ∷ # 96 ∷ # 130 ∷ # 222 ∷ # 73 ∷ # 129 ∷ # 218 ∷ # 85 ∷ # 212 ∷ # 228 ∷ # 108 ∷ # 133 ∷ # 136 ∷ # 28 ∷ # 31 ∷ # 5 ∷ # 248 ∷ # 2 ∷ # 32 ∷ # 4 ∷ # 202 ∷ # 126 ∷ # 97 ∷ # 177 ∷ # 74 ∷ # 36 ∷ # 19 ∷ # 132 ∷ # 224 ∷ # 252 ∷ # 255 ∷ # 133 ∷ # 162 ∷ # 254 ∷ # 232 ∷ # 132 ∷ # 4 ∷ # 13 ∷ # 104 ∷ # 144 ∷ # 44 ∷ # 141 ∷ # 2 ∷ # 23 ∷ # 197 ∷ # 155 ∷ # 34 ∷ # 114 ∷ # 94 ∷ # 193 ∷ # 254 ∷ # 0 ∷ # 118 ∷ # 0 ∷ # 81 ∷ # 163 ∷ # 176 ∷ # 245 ∷ # 253 ∷ # 1 ∷ # 121 ∷ # 156 ∷ # 86 ∷ # 109 ∷ # 184 ∷ # 55 ∷ # 120 ∷ # 143 ∷ # 12 ∷ # 164 ∷ # 122 ∷ # 204 ∷ # 27 ∷ # 39 ∷ # 203 ∷ # 247 ∷ # 158 ∷ # 136 ∷ # 66 ∷ # 154 ∷ # 13 ∷ # 254 ∷ # 212 ∷ # 139 ∷ # 5 ∷ # 229 ∷ # 0 ∷ # 0 ∷ # 1 ∷ # 120 ∷ # 235 ∷ # 135 ∷ # 157 ∷ # 230 ∷ # 0 ∷ # 0 ∷ # 4 ∷ # 3 ∷ # 0 ∷ # 71 ∷ # 48 ∷ # 69 ∷ # 2 ∷ # 33 ∷ # 0 ∷ # 206 ∷ # 85 ∷ # 132 ∷ # 17 ∷ # 53 ∷ # 184 ∷ # 168 ∷ # 113 ∷ # 92 ∷ # 153 ∷ # 47 ∷ # 198 ∷ # 112 ∷ # 61 ∷ # 139 ∷ # 14 ∷ # 211 ∷ # 194 ∷ # 250 ∷ # 198 ∷ # 20 ∷ # 143 ∷ # 26 ∷ # 199 ∷ # 165 ∷ # 95 ∷ # 0 ∷ # 31 ∷ # 162 ∷ # 18 ∷ # 134 ∷ # 6 ∷ # 2 ∷ # 32 ∷ # 112 ∷ # 7 ∷ # 32 ∷ # 102 ∷ # 197 ∷ # 105 ∷ # 174 ∷ # 226 ∷ # 232 ∷ # 169 ∷ # 26 ∷ # 198 ∷ # 199 ∷ # 51 ∷ # 232 ∷ # 250 ∷ # 183 ∷ # 25 ∷ # 60 ∷ # 238 ∷ # 150 ∷ # 70 ∷ # 29 ∷ # 148 ∷ # 60 ∷ # 242 ∷ # 59 ∷ # 39 ∷ # 140 ∷ # 97 ∷ # 149 ∷ [ # 199 ]

    val₂ : List Dig
    val₂ = # 163 ∷ # 130 ∷ # 3 ∷ # 54 ∷ # 48 ∷ # 130 ∷ # 3 ∷ # 50 ∷ # 48 ∷ # 31 ∷ # 6 ∷ # 3 ∷ # 85 ∷ # 29 ∷ # 35 ∷ # 4 ∷ # 24 ∷ # 48 ∷ # 22 ∷ # 128 ∷ # 20 ∷ # 36 ∷ # 110 ∷ # 43 ∷ # 45 ∷ # 208 ∷ # 106 ∷ # 146 ∷ # 81 ∷ # 81 ∷ # 37 ∷ # 105 ∷ # 1 ∷ # 170 ∷ # 154 ∷ # 71 ∷ # 166 ∷ # 137 ∷ # 231 ∷ # 64 ∷ # 32 ∷ # 48 ∷ # 29 ∷ # 6 ∷ # 3 ∷ # 85 ∷ # 29 ∷ # 14 ∷ # 4 ∷ # 22 ∷ # 4 ∷ # 20 ∷ # 147 ∷ # 61 ∷ # 128 ∷ # 160 ∷ # 120 ∷ # 95 ∷ # 164 ∷ # 18 ∷ # 101 ∷ # 194 ∷ # 57 ∷ # 173 ∷ # 54 ∷ # 77 ∷ # 116 ∷ # 177 ∷ # 171 ∷ # 84 ∷ # 108 ∷ # 167 ∷ # 48 ∷ # 130 ∷ # 1 ∷ # 130 ∷ # 6 ∷ # 3 ∷ # 85 ∷ # 29 ∷ # 17 ∷ # 4 ∷ # 130 ∷ # 1 ∷ # 121 ∷ # 48 ∷ # 130 ∷ # 1 ∷ # 117 ∷ # 130 ∷ # 10 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 8 ∷ # 97 ∷ # 109 ∷ # 122 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 17 ∷ # 117 ∷ # 101 ∷ # 100 ∷ # 97 ∷ # 116 ∷ # 97 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 13 ∷ # 117 ∷ # 115 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 14 ∷ # 119 ∷ # 119 ∷ # 119 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 12 ∷ # 119 ∷ # 119 ∷ # 119 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 122 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 20 ∷ # 99 ∷ # 111 ∷ # 114 ∷ # 112 ∷ # 111 ∷ # 114 ∷ # 97 ∷ # 116 ∷ # 101 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 17 ∷ # 98 ∷ # 117 ∷ # 121 ∷ # 98 ∷ # 111 ∷ # 120 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 17 ∷ # 105 ∷ # 112 ∷ # 104 ∷ # 111 ∷ # 110 ∷ # 101 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 13 ∷ # 121 ∷ # 112 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 15 ∷ # 104 ∷ # 111 ∷ # 109 ∷ # 101 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 21 ∷ # 111 ∷ # 114 ∷ # 105 ∷ # 103 ∷ # 105 ∷ # 110 ∷ # 45 ∷ # 119 ∷ # 119 ∷ # 119 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 33 ∷ # 98 ∷ # 117 ∷ # 99 ∷ # 107 ∷ # 101 ∷ # 121 ∷ # 101 ∷ # 45 ∷ # 114 ∷ # 101 ∷ # 116 ∷ # 97 ∷ # 105 ∷ # 108 ∷ # 45 ∷ # 119 ∷ # 101 ∷ # 98 ∷ # 115 ∷ # 105 ∷ # 116 ∷ # 101 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 18 ∷ # 104 ∷ # 117 ∷ # 100 ∷ # 100 ∷ # 108 ∷ # 101 ∷ # 115 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 37 ∷ # 112 ∷ # 45 ∷ # 110 ∷ # 116 ∷ # 45 ∷ # 119 ∷ # 119 ∷ # 119 ∷ # 45 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 45 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 45 ∷ # 107 ∷ # 97 ∷ # 108 ∷ # 105 ∷ # 97 ∷ # 115 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 37 ∷ # 112 ∷ # 45 ∷ # 121 ∷ # 111 ∷ # 45 ∷ # 119 ∷ # 119 ∷ # 119 ∷ # 45 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 45 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 45 ∷ # 107 ∷ # 97 ∷ # 108 ∷ # 105 ∷ # 97 ∷ # 115 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 130 ∷ # 37 ∷ # 112 ∷ # 45 ∷ # 121 ∷ # 51 ∷ # 45 ∷ # 119 ∷ # 119 ∷ # 119 ∷ # 45 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 45 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 45 ∷ # 107 ∷ # 97 ∷ # 108 ∷ # 105 ∷ # 97 ∷ # 115 ∷ # 46 ∷ # 97 ∷ # 109 ∷ # 97 ∷ # 122 ∷ # 111 ∷ # 110 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 48 ∷ # 14 ∷ # 6 ∷ # 3 ∷ # 85 ∷ # 29 ∷ # 15 ∷ # 1 ∷ # 1 ∷ # 255 ∷ # 4 ∷ # 4 ∷ # 3 ∷ # 2 ∷ # 5 ∷ # 160 ∷ # 48 ∷ # 29 ∷ # 6 ∷ # 3 ∷ # 85 ∷ # 29 ∷ # 37 ∷ # 4 ∷ # 22 ∷ # 48 ∷ # 20 ∷ # 6 ∷ # 8 ∷ # 43 ∷ # 6 ∷ # 1 ∷ # 5 ∷ # 5 ∷ # 7 ∷ # 3 ∷ # 1 ∷ # 6 ∷ # 8 ∷ # 43 ∷ # 6 ∷ # 1 ∷ # 5 ∷ # 5 ∷ # 7 ∷ # 3 ∷ # 2 ∷ # 48 ∷ # 119 ∷ # 6 ∷ # 3 ∷ # 85 ∷ # 29 ∷ # 31 ∷ # 4 ∷ # 112 ∷ # 48 ∷ # 110 ∷ # 48 ∷ # 53 ∷ # 160 ∷ # 51 ∷ # 160 ∷ # 49 ∷ # 134 ∷ # 47 ∷ # 104 ∷ # 116 ∷ # 116 ∷ # 112 ∷ # 58 ∷ # 47 ∷ # 47 ∷ # 99 ∷ # 114 ∷ # 108 ∷ # 51 ∷ # 46 ∷ # 100 ∷ # 105 ∷ # 103 ∷ # 105 ∷ # 99 ∷ # 101 ∷ # 114 ∷ # 116 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 47 ∷ # 68 ∷ # 105 ∷ # 103 ∷ # 105 ∷ # 67 ∷ # 101 ∷ # 114 ∷ # 116 ∷ # 71 ∷ # 108 ∷ # 111 ∷ # 98 ∷ # 97 ∷ # 108 ∷ # 67 ∷ # 65 ∷ # 71 ∷ # 50 ∷ # 46 ∷ # 99 ∷ # 114 ∷ # 108 ∷ # 48 ∷ # 53 ∷ # 160 ∷ # 51 ∷ # 160 ∷ # 49 ∷ # 134 ∷ # 47 ∷ # 104 ∷ # 116 ∷ # 116 ∷ # 112 ∷ # 58 ∷ # 47 ∷ # 47 ∷ # 99 ∷ # 114 ∷ # 108 ∷ # 52 ∷ # 46 ∷ # 100 ∷ # 105 ∷ # 103 ∷ # 105 ∷ # 99 ∷ # 101 ∷ # 114 ∷ # 116 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 47 ∷ # 68 ∷ # 105 ∷ # 103 ∷ # 105 ∷ # 67 ∷ # 101 ∷ # 114 ∷ # 116 ∷ # 71 ∷ # 108 ∷ # 111 ∷ # 98 ∷ # 97 ∷ # 108 ∷ # 67 ∷ # 65 ∷ # 71 ∷ # 50 ∷ # 46 ∷ # 99 ∷ # 114 ∷ # 108 ∷ # 48 ∷ # 62 ∷ # 6 ∷ # 3 ∷ # 85 ∷ # 29 ∷ # 32 ∷ # 4 ∷ # 55 ∷ # 48 ∷ # 53 ∷ # 48 ∷ # 51 ∷ # 6 ∷ # 6 ∷ # 103 ∷ # 129 ∷ # 12 ∷ # 1 ∷ # 2 ∷ # 1 ∷ # 48 ∷ # 41 ∷ # 48 ∷ # 39 ∷ # 6 ∷ # 8 ∷ # 43 ∷ # 6 ∷ # 1 ∷ # 5 ∷ # 5 ∷ # 7 ∷ # 2 ∷ # 1 ∷ # 22 ∷ # 27 ∷ # 104 ∷ # 116 ∷ # 116 ∷ # 112 ∷ # 58 ∷ # 47 ∷ # 47 ∷ # 119 ∷ # 119 ∷ # 119 ∷ # 46 ∷ # 100 ∷ # 105 ∷ # 103 ∷ # 105 ∷ # 99 ∷ # 101 ∷ # 114 ∷ # 116 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 47 ∷ # 67 ∷ # 80 ∷ # 83 ∷ # 48 ∷ # 116 ∷ # 6 ∷ # 8 ∷ # 43 ∷ # 6 ∷ # 1 ∷ # 5 ∷ # 5 ∷ # 7 ∷ # 1 ∷ # 1 ∷ # 4 ∷ # 104 ∷ # 48 ∷ # 102 ∷ # 48 ∷ # 36 ∷ # 6 ∷ # 8 ∷ # 43 ∷ # 6 ∷ # 1 ∷ # 5 ∷ # 5 ∷ # 7 ∷ # 48 ∷ # 1 ∷ # 134 ∷ # 24 ∷ # 104 ∷ # 116 ∷ # 116 ∷ # 112 ∷ # 58 ∷ # 47 ∷ # 47 ∷ # 111 ∷ # 99 ∷ # 115 ∷ # 112 ∷ # 46 ∷ # 100 ∷ # 105 ∷ # 103 ∷ # 105 ∷ # 99 ∷ # 101 ∷ # 114 ∷ # 116 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 48 ∷ # 62 ∷ # 6 ∷ # 8 ∷ # 43 ∷ # 6 ∷ # 1 ∷ # 5 ∷ # 5 ∷ # 7 ∷ # 48 ∷ # 2 ∷ # 134 ∷ # 50 ∷ # 104 ∷ # 116 ∷ # 116 ∷ # 112 ∷ # 58 ∷ # 47 ∷ # 47 ∷ # 99 ∷ # 97 ∷ # 99 ∷ # 101 ∷ # 114 ∷ # 116 ∷ # 115 ∷ # 46 ∷ # 100 ∷ # 105 ∷ # 103 ∷ # 105 ∷ # 99 ∷ # 101 ∷ # 114 ∷ # 116 ∷ # 46 ∷ # 99 ∷ # 111 ∷ # 109 ∷ # 47 ∷ # 68 ∷ # 105 ∷ # 103 ∷ # 105 ∷ # 67 ∷ # 101 ∷ # 114 ∷ # 116 ∷ # 71 ∷ # 108 ∷ # 111 ∷ # 98 ∷ # 97 ∷ # 108 ∷ # 67 ∷ # 65 ∷ # 71 ∷ # 50 ∷ # 46 ∷ # 99 ∷ # 114 ∷ # 116 ∷ # 48 ∷ # 12 ∷ # 6 ∷ # 3 ∷ # 85 ∷ # 29 ∷ # 19 ∷ # 1 ∷ # 1 ∷ # 255 ∷ # 4 ∷ # 2 ∷ # 48 ∷ [ # 0 ]

    val₃ : List Dig
    val₃ = # 163 ∷ # 66 ∷ # 48 ∷ # 64 ∷ # 48 ∷ # 15 ∷ # 6 ∷ # 3 ∷ # 85 ∷ # 29 ∷ # 19 ∷ # 1 ∷ # 1 ∷ # 255 ∷ # 4 ∷ # 5 ∷ # 48 ∷ # 3 ∷ # 1 ∷ # 1 ∷ # 255 ∷ # 48 ∷ # 14 ∷ # 6 ∷ # 3 ∷ # 85 ∷ # 29 ∷ # 15 ∷ # 1 ∷ # 1 ∷ # 255 ∷ # 4 ∷ # 4 ∷ # 3 ∷ # 2 ∷ # 1 ∷ # 134 ∷ # 48 ∷ # 29 ∷ # 6 ∷ # 3 ∷ # 85 ∷ # 29 ∷ # 14 ∷ # 4 ∷ # 22 ∷ # 4 ∷ # 20 ∷ # 78 ∷ # 34 ∷ # 84 ∷ # 32 ∷ # 24 ∷ # 149 ∷ # 230 ∷ # 227 ∷ # 110 ∷ # 230 ∷ # 15 ∷ # 250 ∷ # 250 ∷ # 185 ∷ # 18 ∷ # 237 ∷ # 6 ∷ # 23 ∷ # 143 ∷ [ # 57 ]

    -- test₁ : X509.Extensions val₁
    -- test₁ = Success.value (toWitness {Q = Logging.val (runParser parseExtensions val₁)} tt)

    test₂ : X509.Extensions val₂
    test₂ = Success.value (toWitness {Q = Logging.val (runParser parseExtensions val₂)} tt)

    test₃ : X509.Extensions val₃
    test₃ = Success.value (toWitness {Q = Logging.val (runParser parseExtensions val₃)} tt)
